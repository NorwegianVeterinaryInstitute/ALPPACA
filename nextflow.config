/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    NorwegianVeterinaryInstitute/ALPPACA Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Global default params, used in configs
params {

	// Input
	input			= null

	// Ani analysis options
	kmer_size		= "16"
	fragment_length		= "3000"
	min_fraction		= "0.2"

	// Core gene analysis options
	prokka_additional	= ""
	refdb			= null
	clean_mode		= "moderate"
	qc			= false

	// Core genome analysis options
	parsnp_ref		= "!"
	
	// Mapping analysis options
	snippyref		= null
	R1			= null
	R2			= null
	suffix			= null

	// General options
	deduplicate		= false
	filter_snps		= true
	treebuilder		= "raxml"
	gubbinsmodel		= "GTRGAMMA"
	iqtree_model		= "GTR+I+F"
	mset			= "HKY,GTR,SYM"
	cmax			= "6"
	seed			= "12345"
	bootstrap		= "1000"
	outgroup		= ""
	time_multiplier		= 1
	publish_dir_mode	= "copy"
}

// Define profiles
profiles {
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
	params.enable_conda    = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
	params.enable_conda    = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
	params.enable_conda    = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
	params.enable_conda    = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
	params.enable_conda    = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test_core_genome { includeConfig 'conf/test_core_genome.config' }
    test_core_gene { includeConfig 'conf/test_core_gene.config' }
    test_mapping { includeConfig 'conf/test_mapping.config' }
    test_ani { includeConfig 'conf/test_ani.config' }
}

conda { createTimeout = "120 min" }

// Load config for module-specific options
includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'

// Manifest
manifest {
    name            = 'NorwegianVeterinaryInstitute/ALPPACA'
    author          = 'HÃ¥kon Kaspersen'
    homePage        = 'https://github.com/NorwegianVeterinaryInstitute/ALPPACA'
    description     = 'A Tool for Prokaryotic Phylogeny and Clustering Analysis'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.6'
    version         = '2.1.0'
}

// Define variables to prevent local R libraries from conflicting with the container
env {
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
